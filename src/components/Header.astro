---
const URL = Astro.url.pathname;

interface Link {
  text: string;
  href: string;
  icon: string;
}

const LINKS: Link[] = [
  {
    text: 'Home',
    href: '/',
    icon: 'house',
  },
  {
    text: 'Codes',
    href: '/current-codes',
    icon: 'asterisk',
  },
  {
    text: 'Add new',
    href: '/new',
    icon: 'plus',
  },
];

LINKS.map((link) => {
  link.icon = 'fa-solid fa-' + link.icon;
});
---

<header id="header">
  <nav>
    <ul>
      <li>
        <a href="/">
          <strong>USSD 250</strong>
        </a>
      </li>
    </ul>
    <ul class="small-only" id="menu-icon">
      <li>
        <button>
          <i class="fa-solid fa-bars"></i>
        </button>
      </li>
    </ul>
    <ul class="menu" id="menu">
      {
        LINKS.map(({ href, icon, text }) => (
          <li>
            <a
              {href}
              class:list={[
                'outline',
                { secondary: URL !== href },
                { primary: URL === href },
              ]}
              role="button"
            >
              <i class={icon} />
              <span> {text}</span>
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<style>
  strong {
    font-size: 2rem;
  }

  a:has(strong):hover {
    text-decoration: none;
  }

  a {
    margin-top: 0;
  }

  i {
    margin-right: 0.5rem;
  }

  .small-only {
    display: none;
  }

  @media (width < 48rem) {
    .small-only {
      display: flex;

      button {
        all: unset;
        padding: 0.1rem;
        cursor: pointer;

        &:focus-visible {
          outline: 0.2rem solid var(--pico-primary);
        }
      }

      i {
        font-size: 2rem;
        margin: 0;
      }
    }

    .menu {
      flex-direction: column;
      align-items: start;
      position: absolute;

      top: var(--header-height);
      right: 0;
      margin: 0;

      background-color: var(--pico-background-color);
      box-shadow: inset 0 0 0.5rem var(--pico-color-jade-300);
      width: 75%;
      height: calc(100vh - var(--header-height));
      border-radius: 0.5rem;

      transform: translateX(100%);
      transition: transform 0.5s ease-in-out;

      a {
        border: none;
      }

      &.show {
        transform: translateX(0%);
      }
    }
  }

  @media (width < 36rem) {
    .menu.show {
      transform: translateX(-1rem);
    }
  }
</style>

<script>
  const menuIcon = document.getElementById('menu-icon');
  const menu = document.getElementById('menu');
  const header = document.getElementById('header');

  if (menuIcon) {
    menuIcon.onclick = handleMenu;
  }

  function handleMenu() {
    if (!menuIcon) return;

    menu?.classList.toggle('show');
    menuIcon.querySelector('i')?.classList.toggle('fa-close');
  }

  const headerHeight = header?.getClientRects()[0].height ?? 0;
  menu?.style.setProperty('--header-height', headerHeight + 'px');
</script>
